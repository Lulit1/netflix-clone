{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\getne\\\\OneDrive\\\\Desktop\\\\projects\\\\netflix clone\\\\netflix-clone\\\\src\\\\row\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Row.css\";\nimport \"./App\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport axios from \"./axios\";\n// const baseURL = \"https://api.themoviedb.org/3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      // console.log(request);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies === null || movies === void 0 ? void 0 : movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"40px\"\n      },\n      children: trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n}\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useState","YouTube","movieTrailer","axios","jsxDEV","_jsxDEV","baseURL","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","heighr","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","name","id","style","padding","videoId","_c","$RefreshReg$"],"sources":["C:/Users/getne/OneDrive/Desktop/projects/netflix clone/netflix-clone/src/row/Row.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Row.css\";\r\nimport \"./App\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport axios from \"./axios\";\r\n// const baseURL = \"https://api.themoviedb.org/3\";\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\tconst [movies, setMovies] = useState([]);\r\n\tconst [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchData() {\r\n\t\t\tconst request = await axios.get(fetchUrl);\r\n\t\t\t// console.log(request);\r\n\t\t\tsetMovies(request.data.results);\r\n\t\t\treturn request;\r\n\t\t}\r\n\t\tfetchData();\r\n\t}, [fetchUrl]);\r\n\tconst opts = {\r\n\t\theighr: \"390\",\r\n\t\twidth: \"100%\",\r\n\t\tplayerVars: {\r\n\t\t\tautoplay: 1,\r\n\t\t},\r\n\t};\r\n\tconst handleClick = (movie) => {\r\n\t\tif (trailerUrl) {\r\n\t\t\tsetTrailerUrl(\"\");\r\n\t\t} else {\r\n\t\t\tmovieTrailer(movie?.title || \"\")\r\n\t\t\t\t.then((url) => {\r\n\t\t\t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\r\n\t\t\t\t\tsetTrailerUrl(urlParams.get(\"v\"));\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => console.log(error));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t<div className=\"row__posters\">\r\n\t\t\t\t{movies?.map((movie) => (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\t\tonClick={() => handleClick(movie)}\r\n\t\t\t\t\t\tclassName={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n\t\t\t\t\t\tsrc={`${baseURL}${\r\n\t\t\t\t\t\t\tisLargeRow ? movie.poster_path : movie.backdrop_path\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\talt={movie.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<div style={{ padding: \"40px\" }}>\r\n\t\t\t\t{trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Row;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}