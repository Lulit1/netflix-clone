{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\getne\\\\OneDrive\\\\Desktop\\\\projects\\\\netflix clone\\\\netflix-clone\\\\src\\\\row\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Row.css\";\nimport \"./App\";\n// import YouTube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\nimport axios from \"../axios\";\n// const baseURL = \"https://api.themoviedb.org/3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  // const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  // const handleClick = (movie) => {\n  // \tif (trailerUrl) {\n  // \t\tsetTrailerUrl(\"\");\n  // \t} else {\n  // \t\tmovieTrailer(movie?.title || \"\")\n  // \t\t\t.then((url) => {\n  // \t\t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n  // \t\t\t\tsetTrailerUrl(urlParams.get(\"v\"));\n  // \t\t\t})\n  // \t\t\t.catch((error) => console.log(error));\n  // \t}\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies === null || movies === void 0 ? void 0 : movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"40px\"\n      },\n      children: trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","baseURL","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","fetchData","request","get","console","log","data","results","opts","heighr","width","playerVars","autoplay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","onClick","handleClick","src","poster_path","backdrop_path","alt","name","id","style","padding","trailerUrl","YouTube","videoId","_c","$RefreshReg$"],"sources":["C:/Users/getne/OneDrive/Desktop/projects/netflix clone/netflix-clone/src/row/Row.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Row.css\";\r\nimport \"./App\";\r\n// import YouTube from \"react-youtube\";\r\n// import movieTrailer from \"movie-trailer\";\r\nimport axios from \"../axios\";\r\n// const baseURL = \"https://api.themoviedb.org/3\";\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\tconst [movies, setMovies] = useState([]);\r\n\t// const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchData() {\r\n\t\t\tconst request = await axios.get(fetchUrl);\r\n\t\t\tconsole.log(request);\r\n\t\t\tsetMovies(request.data.results);\r\n\t\t\treturn request;\r\n\t\t}\r\n\t\tfetchData();\r\n\t}, [fetchUrl]);\r\n\tconst opts = {\r\n\t\theighr: \"390\",\r\n\t\twidth: \"100%\",\r\n\t\tplayerVars: {\r\n\t\t\tautoplay: 1,\r\n\t\t},\r\n\t};\r\n\t// const handleClick = (movie) => {\r\n\t// \tif (trailerUrl) {\r\n\t// \t\tsetTrailerUrl(\"\");\r\n\t// \t} else {\r\n\t// \t\tmovieTrailer(movie?.title || \"\")\r\n\t// \t\t\t.then((url) => {\r\n\t// \t\t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\r\n\t// \t\t\t\tsetTrailerUrl(urlParams.get(\"v\"));\r\n\t// \t\t\t})\r\n\t// \t\t\t.catch((error) => console.log(error));\r\n\t// \t}\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t<div className=\"row__posters\">\r\n\t\t\t\t{movies?.map((movie) => (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\t\tonClick={() => handleClick(movie)}\r\n\t\t\t\t\t\tclassName={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n\t\t\t\t\t\tsrc={`${baseURL}${\r\n\t\t\t\t\t\t\tisLargeRow ? movie.poster_path : movie.backdrop_path\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\talt={movie.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<div style={{ padding: \"40px\" }}>\r\n\t\t\t\t{trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Row;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAO,OAAO;AACd;AACA;AACA,OAAOC,KAAK,MAAM,UAAU;AAC5B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,sCAAsC;AAEtD,SAASC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC;;EAEAD,SAAS,CAAC,MAAM;IACf,eAAea,SAASA,CAAA,EAAG;MAC1B,MAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACP,QAAQ,CAAC;MACzCQ,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;MACpBF,SAAS,CAACE,OAAO,CAACI,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOL,OAAO;IACf;IACAD,SAAS,CAAC,CAAC;EACZ,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EACd,MAAMY,IAAI,GAAG;IACZC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACXC,QAAQ,EAAE;IACX;EACD,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACCpB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACnBtB,OAAA;MAAAsB,QAAA,EAAKnB;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChB1B,OAAA;MAAKqB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC3Bf,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEoB,GAAG,CAAEC,KAAK,iBAClB5B,OAAA;QAEC6B,OAAO,EAAEA,CAAA,KAAMC,WAAW,CAACF,KAAK,CAAE;QAClCP,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAAE;QAC7D0B,GAAG,EAAG,GAAE9B,OAAQ,GACfI,UAAU,GAAGuB,KAAK,CAACI,WAAW,GAAGJ,KAAK,CAACK,aACvC,EAAE;QACHC,GAAG,EAAEN,KAAK,CAACO;MAAK,GANXP,KAAK,CAACQ,EAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOb,CACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN1B,OAAA;MAAKqC,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAhB,QAAA,EAC9BiB,UAAU,iBAAIvC,OAAA,CAACwC,OAAO;QAACC,OAAO,EAAEF,UAAW;QAACvB,IAAI,EAAEA;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAER;AAACpB,EAAA,CAtDQJ,GAAG;AAAAwC,EAAA,GAAHxC,GAAG;AAwDZ,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}